import sqlite3
from tkinter import *


class Functionalities():

    def clean_screen_login(self):
        self.entry_account.delete(0, END)
        self.entry_user.delete(0, END)
        self.entry_pass.delete(0, END)
        self.entry_search.delete(0, END)

    def connect_db(self):
        print("Conectando ao banco de dados...")
        self.conn = sqlite3.connect("db/logins.db")
        self.cursor = self.conn.cursor()

    def desconnect_db(self):
        print("Desconectando ao banco de dados...")
        self.conn.close()

    def create_tables(self):
        self.connect_db()

        # CRIANDO TABELA

        self.cursor.execute("""
            CREATE TABLE IF NOT EXISTS logins_saved (
                id INTEGER PRIMARY KEY,
                account CHAR(40),
                email_or_username CHAR(40) NOT NULL,
                pass_login CHAR(40) NOT NULL
                );
        """)

        self.conn.commit()
        print("Banco de dados criado!")
        self.desconnect_db()

    def var(self):
        self.account = self.entry_account.get()
        self.user_or_email = self.entry_user.get()
        self.password = self.entry_pass.get()

    def add_logins(self):
        self.var()
        self.connect_db()

        self.cursor.execute(""" INSERT INTO logins_saved (account, email_or_username, pass_login )
                VALUES (?,?,?)""", (self.account, self.user_or_email, self.password))

        self.conn.commit()
        self.desconnect_db()
        self.select_list()
        self.clean_screen_login()

    def select_list(self):
        self.list_logins.delete(*self.list_logins.get_children())
        self.connect_db()
        list_select = self.cursor.execute(""" SELECT account, email_or_username, pass_login FROM logins_saved
            ORDER BY account ASC; """)
        for i in list_select:
            self.list_logins.insert("", END, values=i)
        self.desconnect_db()

    def OnDoubleClick(self, event):
        self.clean_screen_login()
        self.list_logins.selection()

        for n in self.list_logins.selection():
            col2, col3, col4 = self.list_logins.item(n, 'values')  # the col1 var is a ID generated by database
            self.entry_account.insert(END, col2)
            self.entry_user.insert(END, col3)
            self.entry_pass.insert(END, col4)

    def delet_login(self):
        self.var()
        self.connect_db()
        self.cursor.execute(""" DELETE FROM logins_saved WHERE account = ?""", (self.account,))
        self.conn.commit()
        self.desconnect_db()
        self.clean_screen_login()
        self.select_list()

    def edit_client(self):
        self.var()
        self.connect_db()

        self.cursor.execute(""" UPDATE logins_saved SET account = ?, email_or_username = ?, pass_login= ?
        WHERE account = ? """, (self.account, self.user_or_email, self.password, self.account))

        self.conn.commit()
        self.desconnect_db()
        self.select_list()
        self.clean_screen_login()

    def search_logins(self):
        self.connect_db()
        self.list_logins.delete(*self.list_logins.get_children())

        self.entry_search.insert(END, '%')  # & means automatic search for string in db
        search = self.entry_search.get()
        self.cursor.execute(""" SELECT account, email_or_username, pass_login FROM logins_saved
        WHERE account LIKE '%s' ORDER BY account ASC""" % search)
        search_account_name = self.cursor.fetchall()
        for i in search_account_name:
            self.list_logins.insert("", END, values=i)
        self.clean_screen_login()
        self.desconnect_db()
